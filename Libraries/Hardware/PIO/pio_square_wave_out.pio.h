// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------------- //
// squarewave_out //
// -------------- //

#define squarewave_out_wrap_target 1
#define squarewave_out_wrap 2

static const uint16_t squarewave_out_program_instructions[] = {
    0xe081, //  0: set    pindirs, 1                 
            //     .wrap_target
    0xe001, //  1: set    pins, 1                    
    0xe000, //  2: set    pins, 0                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program squarewave_out_program = {
    .instructions = squarewave_out_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config squarewave_out_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + squarewave_out_wrap_target, offset + squarewave_out_wrap);
    return c;
}

static inline void square_wave_out_init(PIO pio, uint sm, uint offset, float pio_sm_clk_div, uint squarewave_out_pin) {
    //Get configuration
    pio_sm_config config = squarewave_out_program_get_default_config(offset);
    //Set clock divider
    sm_config_set_clkdiv(&config, pio_sm_clk_div);
    //Set pins
    sm_config_set_set_pins(&config, squarewave_out_pin, 1);
    //Init gpio and set pindirs
    pio_gpio_init(pio, squarewave_out_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, squarewave_out_pin, 1, true); 
    //Init pio-statemachine with configuration
    pio_sm_init(pio, sm, offset, &config);
}

#endif

