//File: spi_test.h
//Project: Pico_MRI_Test_M

/* Description:

    This is a handler for testing the SPI-peripheral of RP2040 inside a MRI-Scanner.

        The test setup for SPI is:

        -Two Raspberry-Pi-Pico-Boards (Main and Sub)
        -Main sends out random generated bytes and send them to sub
        -Sub reads the bytes and send them back if main polls them
        -On main the TX and RX bytes are printed out and compared if they are equal
        -The number of transfers per test (per clock frequency) could be set, also the corresponding  clock frequency could be set
        -The number of bytes sent is 2 to the power of the actual transfer nr., plus two (so it makes sure to send atleast four bytes)
        -The four bytes are because as the slave needs to receive a rx interrupt wich only triggers if the FIFO-Buffer is half full (FIFO-Buffer length is 8 Byte)

*/

//Libraries:

//Standard-C:

//Pico:

//Pico High-LvL-Libraries:
#include "pico/stdlib.h" //Pico Standard-Lib for pico specific datatypes in function prototypes

//Pico Hardware-Libraries:
#include "hardware/spi.h"

//Own Libraries:

//Preprocessor constants:
#define MAX_SPI_DATA_SIZE 64
#define MAX_SPI_TRANSFERS 5

//Type definitions:

typedef struct SPI_Test_Hardware_s {

    //Actual spi hardware the test is performed on
    spi_inst_t *spi_instance;
    //MISO, MOSI, CLK and CS pin of the spi hardware the tests are performed on
    uint spi_miso_pin;
    uint spi_mosi_pin;
    uint spi_clk_pin;
    uint spi_cs_pin;

}SPI_Test_Hardware_t;

 

typedef struct SPI_Test_Parameter_s {

    //Parameters of the test

    //Number of transfers p. test
    uint8_t number_of_transfers;
    //The various clk frequencies
    uint32_t parameter_clk_frequency;

}SPI_Test_Parameter_t;

typedef struct SPI_Test_Structure_s {

    SPI_Test_Hardware_t hardware;
    SPI_Test_Parameter_t parameter;

}SPI_Test_Structure_t;

typedef struct SPI_Test_Return_s {

    uint32_t spi_clk_frequency;
    uint8_t num_of_transfers;
    uint8_t rx_data_from_sub_to_main[MAX_SPI_TRANSFERS][MAX_SPI_DATA_SIZE];
    uint8_t tx_data_from_main_to_sub[MAX_SPI_TRANSFERS][MAX_SPI_DATA_SIZE];

}SPI_Test_Return_t;

typedef struct SPI_Test_Output_Format_s {

    uint8_t separator;
    uint8_t bytes_per_line;

}SPI_Test_Output_Format_t;


//Function Prototypes:

int spi_test_echo_main(SPI_Test_Structure_t spi_tests, SPI_Test_Return_t *return_of_test, bool use_watchdog);
void spi_test_echo_sub(SPI_Test_Structure_t spi_tests, bool use_watchdog);
void spi_test_print_test_returns(SPI_Test_Return_t *test_return,  uint8_t num_of_tests, uart_inst_t *uart_to_print, SPI_Test_Output_Format_t format);
bool spi_compare_tx_rx(uint8_t rx_data, uint8_t tx_data);



//end file spi_test.h