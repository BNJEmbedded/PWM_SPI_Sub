//File: uart_test.h
//Project: Pico_MRI_Test_M

/* Description:

    This is a handler for testing the uart-peripheral of RP2040 inside an MRI.

    The test setup for UART is:

        -Two Raspberry-Pi-Pico-Boards (Main and Sub)
        -Main sends out random generated bytes and send them to sub
        -Sub reads the bytes and send them back, the main reads it again
        -On main the TX and RX bytes are printed out and compared if they are equal
        -The number of transfers per test (per baudrate) could be set, also the corresponding  clock frequency could be set
        -The number of bytes sent is 2 to the power of the actual transfer nr.
   
*/

//Libraries:

//Standard-C:

//Pico:

//Pico High-LvL-Libraries:
#include "pico/stdlib.h" //Pico Standard-Lib for pico specific datatypes in function prototypes

//Pico Hardware-Libraries:

//Own Libraries:

//Preprocessor constants:
#define MAX_UART_DATA_SIZE 256
#define MAX_UART_TRANSFERS 7

//Type definitions:

typedef struct Uart_Test_Hardware_s {

    //Actual uart hardware the test is performed on
    uart_inst_t *uart_instance;
    //TX and RX Pins of uart hardware to test
    uint uart_tx_pin;
    uint uart_rx_pin;

}Uart_Test_Hardware_t;

typedef struct Uart_Test_Parameter_s {

    //Parameters of the test

    //Number of transfers p. test
    uint8_t number_of_transfers;
    //The various baudrates
    uint32_t parameter_baud_rate;

}Uart_Test_Parameter_t;

typedef struct Uart_Test_Structure_s {

    Uart_Test_Hardware_t hardware;
    Uart_Test_Parameter_t parameter;

}Uart_Test_Structure_t;

typedef struct Uart_Test_Return_s {

    uint32_t baudrate;
    uint8_t num_of_transfers;
    uint8_t rx_data[MAX_UART_TRANSFERS][MAX_UART_DATA_SIZE];
    uint8_t tx_data[MAX_UART_TRANSFERS][MAX_UART_DATA_SIZE];

}Uart_Test_Return_t;

typedef struct Uart_Test_Output_Format_s {

    bool single_byte;
    uint8_t separator;
    uint8_t bytes_per_line;

}Uart_Test_Output_Format_t;

//Function Prototypes:

int uart_test_echo_main(Uart_Test_Structure_t uart_tests, Uart_Test_Return_t *return_of_test, bool use_watchdog);
void uart_test_echo_sub(Uart_Test_Structure_t uart_tests, bool use_watchdog);
void uart_test_print_test_returns(Uart_Test_Return_t *test_return, uint8_t num_of_tests, uart_inst_t *uart_to_print, Uart_Test_Output_Format_t format);
bool uart_compare_tx_rx_string(uint8_t *rx_data, uint8_t *tx_data);
bool uart_compare_tx_rx_byte(uint8_t rx_data, uint8_t tx_data);

//end file uart_test.h